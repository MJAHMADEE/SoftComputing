# -*- coding: utf-8 -*-
"""Soft_HW4_Q8__11_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b2Ra3kYe70qL0VJ2HoPK3r_7KW5hgNIE

## E11.1 - i
"""

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-1, 1, 100)
y1 = x1 + 1
y2 = np.zeros(100)
x3 = np.zeros(100)

plt.plot(x1, y1, 'r', x1, y2, 'b', x3, x1, 'g')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Triangle t1 boundary decisions')
plt.savefig('E1111.pdf')
plt.show()

import matplotlib.pyplot as plt

x1 = [1, 2, 3, 4, 5]
y1 = [1, 2, 3, 4, 5]

x2 = [1, 2, 3, 4, 5]
y2 = [1, 1, 1, 1, 1]

x3 = [2, 2, 2, 2, 2]
y3 = [1, 2, 3, 4, 5]

plt.plot(x1, y1, label='y1 = x1')
plt.plot(x2, y2, label='y2 = 1')
plt.plot(x3, y3, label='y3 = 2')

plt.xlabel('x')
plt.ylabel('y')
plt.title('Triangle t2 boundary decisions')
plt.legend()
plt.savefig('E1112.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create the vectors X and Y
x = np.arange(-3, 3, 0.01)
y1 = x
y2 = np.zeros(600)
x3 = np.zeros(600)
y3 = x + 1
x4 = 2*np.ones(600)
y4 = 1*np.ones(600)

# Create the plot
plt.plot(x, y1, label='y1 = x1 + 1')
plt.plot(x, y2, label='y2 = 0')
plt.plot(x3, y3, label='x3 = 0')
plt.plot(x, y3, label='y3 = x3 + 1')
plt.plot(x4, y3, label='x4 = 2')
plt.plot(x, y4, label='y4 = 1')

# Add a title
plt.title('Triangle t1 and t2 boundary decisions')

# Add X and y Label
plt.xlabel('X')
plt.ylabel('Y')

# Add a grid
plt.grid(alpha=.4,linestyle='--')

# Add a Legend
plt.legend()

# Save the plot
plt.savefig('E1113.pdf')

# Show the plot
plt.show()

import numpy as np

def hardlims(x):
    result = np.zeros((x.shape[0], x.shape[1]))
    for i in range(x.shape[0]):
        for j in range(x.shape[1]):
            if x[i,j] < 0:
                result[i,j] = -1
            else:
                result[i,j] = 1
    return result

w1 = np.array([[1, -1], [-1, 0], [0, 1], [1, -1], [-1, 0], [0, 1]])
b1 = np.array([[1], [0], [0], [0], [2], [-1]])
w2 = np.array([[1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1]])
b2 = np.array([[-2], [-2]])
w3 = np.array([[1, 1]])
b3 = 1

p1 = np.array([[-0.5], [0.25]])
p2 = np.array([[0.5], [1]])

# Test
a11 = hardlims(np.dot(w1, p1) + b1)
print(a11)

a21 = hardlims(np.dot(w1, p2) + b1)
print(a21)

w2

a12 = hardlims(np.dot(w2, a11) + b2)
print(a12)

a22 = hardlims(np.dot(w2, a21) + b2)
print(a22)

a13 = hardlims(np.dot(w3, a12) + b3)
print(a13)

a23 = hardlims(np.dot(w3, a22) + b3)
print(a23)

"""## E11.1 - ii"""

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-1, 1, 100)
y1 = -x1 - 1
y2 = -1*np.ones(100)
x3 = -1*np.ones(100)

plt.plot(x1, y1, 'r', x1, y2, 'b', x3, x1, 'g')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Triangle t1 boundary decisions')
plt.savefig('E1121.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-1, 1, 100)
y1 = x1
y2 = np.zeros(100)
x2 = 1*np.ones(100)

plt.plot(x1, y1, 'r', x1, y2, 'b', x2, x1, 'g')
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Triangle t2 boundary decisions')
plt.savefig('E1122.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create the vectors X and Y
x = np.arange(-3, 3, 0.01)
y1 = -x-1
y2 = -1*np.ones(600)
x3 = -1*np.ones(600)
y3 = x
x4 = 1*np.ones(600)
y4 = np.zeros(600)

# Create the plot
plt.plot(x, y1, label='y1 = -x1 - 1')
plt.plot(x, y2, label='y2 = -1')
plt.plot(x3, y3, label='x3 = -1')
plt.plot(x, y3, label='y3 = x3')
plt.plot(x4, y3, label='x4 = 1')
plt.plot(x, y4, label='y4 = 0')

# Add a title
plt.title('Triangle t1 and t2 boundary decisions')

# Add X and y Label
plt.xlabel('X')
plt.ylabel('Y')

# Add a grid
plt.grid(alpha=.4,linestyle='--')

# Add a Legend
plt.legend()

# Save the plot
plt.savefig('E1123.pdf')

# Show the plot
plt.show()

import numpy as np

def hardlims(x):
    result = np.zeros((x.shape[0], x.shape[1]))
    for i in range(x.shape[0]):
        for j in range(x.shape[1]):
            if x[i,j] < 0:
                result[i,j] = -1
            else:
                result[i,j] = 1
    return result

w1 = np.array([[-1, -1], [1, 0], [0, 1], [1, -1], [-1, 0], [0, 1]])
b1 = np.array([[-1], [1], [1], [0], [1], [0]])
w2 = np.array([[1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1]])
b2 = np.array([[-2], [-2]])
w3 = np.array([[1, 1]])
b3 = 1

p1 = np.array([[-0.5], [-0.5]])
p2 = np.array([[0.5], [1]])

# Test
a11 = hardlims(np.dot(w1, p1) + b1)
print(a11)

a21 = hardlims(np.dot(w1, p2) + b1)
print(a21)

w2

a12 = hardlims(np.dot(w2, a11) + b2)
print(a12)

a22 = hardlims(np.dot(w2, a21) + b2)
print(a22)

a13 = hardlims(np.dot(w3, a12) + b3)
print(a13)

a23 = hardlims(np.dot(w3, a22) + b3)
print(a23)

"""## E11.1 - iii"""

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-3, 3, 600)
y1 = x1 + 1
y2 = -x1 + 1
x3 = -1*np.ones(600)

plt.plot(x1, y1, 'r', x1, y2, 'b', x3, x1, 'g')
plt.xlabel('x1')
plt.ylabel('x2')
# Add a grid
plt.grid(alpha=.4,linestyle='--')
plt.title('Triangle t1 boundary decisions')
plt.savefig('E1131.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-3, 3, 600)
y1 = x1 - 1
y2 = -x1 -1
y3 = -2*np.ones(600)

plt.plot(x1, y1, 'r', x1, y2, 'b', x1, y3, 'g')
plt.xlabel('x1')
plt.ylabel('x2')
# Add a grid
plt.grid(alpha=.4,linestyle='--')
plt.title('Triangle t2 boundary decisions')
plt.savefig('E1132.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Plot 3 lines: 1- y1 = x1 + 1, 2- y2 = 0, 3- x3 = 0
x1 = np.linspace(-3, 3, 600)
y1 = x1
y2 = -x1
y3 = -x1 + 2
y4 = x1 -2

plt.plot(x1, y1, 'r', x1, y2, 'b', x1, y3, 'g', x1, y4, 'c')
plt.xlabel('x1')
plt.ylabel('x2')
# Add a grid
plt.grid(alpha=.4,linestyle='--')
plt.title('Area t3 boundary decisions')
plt.savefig('E1133.pdf')
plt.show()

import matplotlib.pyplot as plt
import numpy as np

# Create the vectors X and Y
x = np.arange(-3, 3, 0.01)
y1 = x + 1
y2 = -x + 1
x3 = -1*np.ones(600)
y3 = x - 1
y4 = -x -1
y5 = -2*np.ones(600)
y6 = x
y7 = -x
y8 = -x + 2
y9 = x -2

# Create the plot
plt.plot(x, y1, label='y1 = -x1 - 1')
plt.plot(x, y2, label='y2 = -1')
plt.plot(x3, y3, label='x3 = -1')
plt.plot(x, y3, label='y3 = x3')
# plt.plot(x4, y3, label='x4 = 1')
plt.plot(x, y4, label='y4 = 0')
plt.plot(x, y5, label='y1 = -x1 - 1')
plt.plot(x, y6, label='y2 = -1')
plt.plot(x, y7, label='x3 = -1')
plt.plot(x, y8, label='y3 = x3')
plt.plot(x, y9, label='x4 = 1')
# plt.plot(x, y4, label='y4 = 0')

# Add a title
plt.title('ÙŽAreas t1, t2, and t3 boundary decisions')

# Add X and y Label
plt.xlabel('X')
plt.ylabel('Y')

# Add a grid
plt.grid(alpha=.4,linestyle='--')

# Add a Legend
# plt.legend()

# Save the plot
plt.savefig('E1134.pdf')

# Show the plot
plt.show()

import numpy as np

def hardlims(x):
    result = np.zeros((x.shape[0], x.shape[1]))
    for i in range(x.shape[0]):
        for j in range(x.shape[1]):
            if x[i,j] < 0:
                result[i,j] = -1
            else:
                result[i,j] = 1
    return result

w1 = np.array([[-1, 1], [-1, -1], [1, 0], [1, -1], [-1, -1], [0, 1], [1, -1], [1, 1], [-1, -1], [-1, 1]])
b1 = np.array([[-1], [1], [1], [-1], [-1], [2], [0], [0], [2], [2]])
w2 = np.array([[1, 1, 1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 1, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 1]])
b2 = np.array([[-2], [-2], [-3]])
w3 = np.array([[1, 1, 1]])
b3 = 2

p1 = np.array([[-0.5], [0.5]])
p2 = np.array([[-2], [-1]])

# Test
a11 = hardlims(np.dot(w1, p1) + b1)
print(a11)

a21 = hardlims(np.dot(w1, p2) + b1)
print(a21)

w2

a12 = hardlims(np.dot(w2, a11) + b2)
print(a12)

a22 = hardlims(np.dot(w2, a21) + b2)
print(a22)

a13 = hardlims(np.dot(w3, a12) + b3)
print(a13)

a23 = hardlims(np.dot(w3, a22) + b3)
print(a23)

"""## E11.1 - iv"""

import numpy as np

def hardlims(x):
    result = np.zeros((x.shape[0], x.shape[1]))
    for i in range(x.shape[0]):
        for j in range(x.shape[1]):
            if x[i,j] < 0:
                result[i,j] = -1
            else:
                result[i,j] = 1
    return result

w1 = np.array([[-1, 0], [0.5, 0], [0, 1], [1, -1], [-2/3, 1], [1, 0]])
b1 = np.array([[0], [0], [1], [-1], [1/3], [-1]])
w2 = np.array([[1, 1, 1, 0, 0, 0], [0, 0, 0, 1, 1, 1]])
b2 = np.array([[-2], [-2]])
w3 = np.array([[1, 1]])
b3 = 1

p1 = np.array([[-1], [0.5]])
p2 = np.array([[0], [-1]])

# Test
a11 = hardlims(np.dot(w1, p1) + b1)
print(a11)

a21 = hardlims(np.dot(w1, p2) + b1)
print(a21)

w2

a12 = hardlims(np.dot(w2, a11) + b2)
print(a12)

a22 = hardlims(np.dot(w2, a21) + b2)
print(a22)

a13 = hardlims(np.dot(w3, a12) + b3)
print(a13)

a23 = hardlims(np.dot(w3, a22) + b3)
print(a23)